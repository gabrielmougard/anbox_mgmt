# Copyright 2022 gab
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

openapi: 3.0.1
info:
  title: Anbox Management API
  description: Anbox Management API
  contact:
    name: Gabriel Mougard
    url: https://norskegab.com
  version: 1.0.0
servers:
  - url: http://0.0.0.0:6000/api/v1
paths:
  /games:
    delete:
      summary: Delete a game
      description: Delete a game. Auth required.
      operationId: DeleteGame
      parameters:
        - name: title
          in: query
          description: Title of the games you want to delete
          schema:
            type: string
        - name: desc
          in: query
          description: Description of the games you want to delete
          schema:
            type: string
        - name: url
          in: query
          description: URL of the games you want to delete
          schema:
            type: string
        - name: age_rating
          in: query
          description: Age rating of the games you want to delete
          schema:
            type: integer
        - name: publisher
          in: query
          description: Publisher of the game you want to delete
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteGameResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
    get:
      summary: List games
      description: List games. Auth required.
      operationId: ListGames
      parameters:
        - name: title
          in: query
          description: Title of the games you want to list
          schema:
            type: string
        - name: desc
          in: query
          description: Description of the games you want to list
          schema:
            type: string
        - name: url
          in: query
          description: URL of the games you want to list
          schema:
            type: string
        - name: age_rating
          in: query
          description: Age rating of the games you want to list
          schema:
            type: integer
        - name: publisher
          in: query
          description: Publisher of the game you want to list
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleGamesResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
    put:
      summary: Update a game
      description: Update a game. Auth is required
      operationId: UpdateGame
      requestBody:
        description: Game to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGameRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleGameResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
      security:
        - Token: []
      x-codegen-request-body-name: game
    post:
      summary: Create a new game
      description: Create a new user. Auth is required
      operationId: CreateGame
      requestBody:
        description: Details of the new game to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGameRequest'
        required: true
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleGameResponse'
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-codegen-request-body-name: body
  /games/link:
    post:
      summary: link a game with a user
      description: Link a game with a user. Auth required.
      operationId: LinkGame
      requestBody:
        description: Details of the which game and user to link
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkGameRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkGameResponse'
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
  /users:
    delete:
      summary: Delete the users
      description: Delete the users. Auth required.
      operationId: DeleteUsers
      parameters:
        - name: email
          in: query
          description: List user by email
          schema:
            type: string
        - name: username
          in: query
          description: List user by user name
          schema:
            type: string
        - name: age
          in: query
          description: List users by age
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
    get:
      summary: List the users
      description: List the users
      operationId: ListUsers
      parameters:
        - name: email
          in: query
          description: List user by email
          schema:
            type: string
        - name: username
          in: query
          description: List user by user name
          schema:
            type: string
        - name: age
          in: query
          description: List users by age
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleUsersResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
    put:
      summary: Update the current user. The one you logged in with.
      description: Updated user information for current user. Auth required.
      operationId: UpdateUser
      requestBody:
        description: User details to update. At least **one** field is required.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
      security:
        - Token: []
      x-codegen-request-body-name: body
    post:
      summary: Create a new user.
      description: Create a new user. Auth NOT required.
      operationId: CreateUser
      requestBody:
        description: User details create new user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
      security:
        - Token: []
      x-codegen-request-body-name: body
  /users/login:
    post:
      summary: Existing user login
      description: Login for existing user
      operationId: UserLogin
      requestBody:
        description: Credentials to use
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginUserResponse'
        401:
          description: Unauthorized
          content: {}
        422:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericError'
      x-codegen-request-body-name: body
components:
  schemas:
    Game:
      required:
        - ageRating
        - createdAt
        - description
        - publisher
        - title
        - url
        - updatedAt
      type: object
      properties:
        ageRating:
          type: integer
        createdAt:
          type: string
          format: date-time
        description:
          type: string
        publisher:
          type: string
        title:
          type: string
        url:
          type: string
        updatedAt:
          type: string
          format: date-time
    SingleGameResponse:
      required:
        - game
      type: object
      properties:
        game:
          $ref: '#/components/schemas/Game'
    MultipleGamesResponse:
      required:
        - games
        - gamesCount
      type: object
      properties:
        games:
          type: array
          items:
            $ref: '#/components/schemas/Game'
        gamesCount:
          type: integer
    DeleteGameResponse:
      type: object    
    CreateGame:
      required:
        - title
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        url:
          type: string
        ageRating:
          type: integer
        publisher:
          type: string
    CreateGameRequest:
      required:
        - game
      type: object
      properties:
        game:
          $ref: '#/components/schemas/CreateGame'
    UpdateGame:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        url:
          type: string
        ageRating:
          type: integer
        publisher:
          type: string
    UpdateGameRequest:
      required:
        - game
      type: object
      properties:
        game:
          $ref: '#/components/schemas/UpdateGame'
    User:
      required:
        - age
        - email
        - username
        - token
        - createdAt
        - updatedAt
      type: object
      properties:
        age:
          type: integer
        createdAt:
          type: string
          format: date-time
        email:
          type: string
        username:
          type: string
        token:
          type: string
        updatedAt:
          type: string
          format: date-time
    Metadata:
      required:
        - playTime
        - playerUsername
        - gameTitle
      type: object
      properties:
        playTime:
          type: string
        playerUsername:
          type: string
        gameTitle:
          type: string
    UserWithMetadata:
      required:
        - user
        - metadata
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/Metadata'
    LoginUser:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
          format: password
    LoginUserRequest:
      required:
        - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/LoginUser'
    LoginUserResponse:
      required:
        - userWithMetadata
      type: object
      properties:
        userWithMetadata:
          $ref: '#/components/schemas/UserWithMetadata'
    DeleteUserResponse:
      type: object
    MultipleUsersResponse:
      required:
        - usersWithMetadata
        - usersCount
      type: object
      properties:
        usersWithMetadata:
          type: array
          items:
            $ref: '#/components/schemas/UserWithMetadata'
        usersCount:
          type: integer    
    NewUser:
      required:
        - age
        - email
        - password
        - username
      type: object
      properties:
        age:
          type: integer
        username:
          type: string
        email:
          type: string
        password:
          type: string
          format: password
    CreateUserRequest:
      required:
        - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/NewUser'
    CreateUserResponse:
      required:
        - userWithMetadata
      type: object
      properties:
        userWithMetadata:
          $ref: '#/components/schemas/UserWithMetadata'
    UpdateUser:
      required:
        - username
      type: object
      properties:
        email:
          type: string
        username:
          type: string
        age:
          type: string
        password:
          type: string
          format: password
    UpdateUserRequest:
      required:
        - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UpdateUser'
    UpdateUserResponse:
      required:
        - userWithMetadata
      type: object
      properties:
        userWithMetadata:
          $ref: '#/components/schemas/UserWithMetadata'
    LinkGameRequest:
      required:
        - game
        - user
      type: object
      properties:
        game:
          $ref: '#/components/schemas/CreateGame'
        user:
          $ref: '#/components/schemas/UpdateUser'
    LinkGameResponse:
      type: object
    GenericError:
      required:
        - errors
      type: object
      properties:
        errors:
          required:
            - body
          type: object
          properties:
            body:
              type: array
              items:
                type: string
  securitySchemes:
    Token:
      type: apiKey
      description: "For accessing the protected API resources, you must have received\
        \ a a valid JWT token after registering or logging in. This JWT token must\
        \ then be used for all protected resources by passing it in via the 'Authorization'\
        \ header.\n\nA JWT token is generated by the API by either registering via\
        \ /users or logging in via /users/login.\n\nThe following format must be in\
        \ the 'Authorization' header :\n\n    Token xxxxxx.yyyyyyy.zzzzzz\n    \n"
      name: Authorization
      in: header